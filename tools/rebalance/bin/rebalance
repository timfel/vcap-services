#!/usr/bin/env ruby
# Copyright (c) 2009-2011 VMware, Inc.

ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../../Gemfile", __FILE__)
require "rubygems"
require "bundler/setup"
require "nats/client"
require "yajl"
require "logger"
require "optparse"
require "eventmachine"
require "rest_client"

class Runner
  def initialize(args=[])
    @args = args
    @options = {}
    @channel = {}
    @logger = Logger.new(STDOUT)
    @logger.level = Logger::INFO
  end

  def run
    trap("TERM") { puts "\nInterupted"; exit(1)}
    trap("INT") { puts "\nInterupted"; exit(1)}
    parse_opt
    unless @args.size == 2
      puts "Need source and destination node name.\n Use -h for help."
      exit 1
    end
    @options[:source] = @args.shift
    @options[:target] = @args.shift
    if @options[:source] == @options[:target]
      puts "ERROR: source node and destination node is the same"
      exit 1
    end
    srv, src, dst = %w(service source target).map{|key| @options[key.to_sym]}
    @http_params = {
      :content_type => "application/json",
      :x_vcap_service_token => @options[:token],
      :timeout => @options["timeout"]
    }
    @url_prefix = "#{@options[:gateway]}/service/internal/v1/migration"
    @instances = []
    if @options[:id]
      begin
        RestClient.post("#{@url_prefix}/#{@options[:source]}/#{@options[:id]}/check", "", @http_params)
      rescue => e
        if e.instance_of? RestClient::ResourceNotFound || e.http_code == 404
          puts "ERROR: Instance #{@options[:id]} is not belong to source node #{@options[:source]}"
        else
          puts "ERROR: #{e}"
        end
        exit 1
      end
      @instances << @options[:id]
    else
      response = RestClient.get("#{@url_prefix}/#{@options[:source]}/instances", @http_params)
      @instances = Yajl::Parser.parse(response)
      if @options[:percent]
        @instances = @instances[0, (@instances.size * @options[:percent]/100)]
      end
    end
    puts "Migration begin..."
    puts
    @instances.each do |instance|
      migrate_instance(instance)
      puts
    end
    puts "Migration complete."
  end

  def migrate_instance(instance)
    puts "Migrate instance #{instance}:"
    puts "Disable instance on source node."
    RestClient.post("#{@url_prefix}/#{@options[:source]}/#{instance}/disable", "", @http_params)
    puts "Import instance on destination node."
    RestClient.post("#{@url_prefix}/#{@options[:target]}/#{instance}/import", "", @http_params)
    puts "Update instance handles on destination node."
    RestClient.post("#{@url_prefix}/#{@options[:target]}/#{instance}/update", "", @http_params)
    puts "Unprovision instance on source node."
    RestClient.post("#{@url_prefix}/#{@options[:source]}/#{instance}/unprovision", "", @http_params)
    puts "Cleanup NFS."
    RestClient.post("#{@url_prefix}/#{@options[:source]}/#{instance}/cleanupnfs", "", @http_params)
  rescue => e
    puts "Error when migrate instance #{instance}: #{e.backtrace} "
    restore(instance)
  end

  # restore instance on source node if any exception
  def restore(instance)
    puts "Restore begin ..."
    puts "Cleanup instance on destination node if there is any."
    begin
      RestClient.post("#{@url_prefix}/#{@options[:target]}/#{instance}/unprovision", "", @http_params)
    rescue => e
      # Ignore restore exception
    end
    puts "Re-enable instance on source node."
    begin
      RestClient.post("#{@url_prefix}/#{@options[:source]}/#{instance}/enable", "", @http_params)
    rescue => e
      puts "Error, failed to re-enable instance #{instance} on node #{@options[:source]}"
    end
  ensure
    puts "Restore complete."
  end

  def parse_opt
    parser = OptionParser.new do |opts|
      opts.banner = "\nUsage: #{$0} [options] source_node_id destination_node_id\n"
      opts.on("-g", "--gateway GATEWAY", "Service gateway URL") {|gateway| @options[:gateway] = gateway}
      opts.on("-i", "--id [ID]", "id of the instance to be migrated.") {|id| @options[:id] = id}
      opts.on("-p", "--percent [PERCENT]", Integer, "how many percent of instances to be migrated. The option overwrite instance given by -i/--id.") {|percent| @options[:percent] = percent}
      opts.on("-t", "--timeout TIMEOUT", Integer, "Timeout in seconds for NAT request method.") {|timeout| @options[:timeout]= timeout }
      opts.on("-k", "--token TOKEN", "Service gateway API access token") {|token| @options[:token] = token }
      opts.on("-h", "--help", "Show this help message.") { puts opts; exit}
    end
    parser.parse!(@args)
  end
end

runner = Runner.new(ARGV.dup)
runner.run
